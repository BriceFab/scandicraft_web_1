# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  server.name: "ScandiCraft"
  site.copyright: "© ScandiCraft. Serveur Minecraft PvP / Faction / Launcher / Moddé / MMORPG."
  mail.sender: "scandicraft.minecraft@gmail.com"
  google_recaptcha_site_key: '%env(GOOGLE_RECAPTCHA_SITE_KEY)%'
  forum_images_url: '/uploads/forum/images/'
  forum_images_directory: '%kernel.project_dir%/public/uploads/forum/images'
  path.spoil.upload_images: /uploads/spoils/images
  VOTE_SERVER_PRIVE_KEY: '%env(VOTE_SERVER_PRIVE_KEY)%'
  APP_ENV: '%env(APP_ENV)%'
  VOTE_DEV_TEST_IP: '%env(VOTE_DEV_TEST_IP)%'
  skins_directory: '%kernel.project_dir%/public/uploads/skins'
  capes_directory: '%kernel.project_dir%/public/uploads/capes'
  path_upload_attachment: /uploads/attachments
  PAYPAL_CLIENT_ID: '%env(PAYPAL_CLIENT_ID)%'
  PAYPAL_SECRET_ID: '%env(PAYPAL_SECRET_ID)%'
  DEDIPASS_PUBLIC_KEY: '%env(DEDIPASS_PUBLIC_KEY)%'
  DEDIPASS_PRIVATE_KEY: '%env(DEDIPASS_PRIVATE_KEY)%'

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: ['controller.service_arguments']

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
  user_service:
    class: App\Service\UserService
    arguments: ["@doctrine.orm.entity_manager"]
  maintenance_service:
    class: App\Service\MaintenanceService
    arguments: ["@doctrine.orm.entity_manager"]
  scandicraft_service:
    class: App\Service\ScandiCraftService
    autowire: true
  discord_service:
    class: App\Service\DiscordService
    autowire: true

  App\EventListener\DoctrineListener:
    tags:
      - name: 'doctrine.event_listener'
        # this is the only required option for the lifecycle listener tag
        event: 'prePersist'
        # listeners can define their priority in case multiple listeners are associated
        # to the same event (default priority = 0; higher numbers = listener is run earlier)
        priority: 500
        # you can also restrict listeners to a specific Doctrine connection
        connection: 'default'
      - name: 'doctrine.event_listener'
        # this is the only required option for the lifecycle listener tag
        event: 'postPersist'
        # listeners can define their priority in case multiple listeners are associated
        # to the same event (default priority = 0; higher numbers = listener is run earlier)
        priority: 500
        # you can also restrict listeners to a specific Doctrine connection
        connection: 'default'

  #Normalizer for API
  App\Normalizer\EntityNormalizer:
    public: false
    autowire: true
    autoconfigure: true
    tags:
      - { name: serializer.normalizer }

  # Security login listener
  App\EventListener\LoginListener:
    tags:
      - { name: 'kernel.event_listener', event: 'security.interactive_login' }